#!/usr/bin/env node

const chalk = require('chalk')
const download = require('download-git-repo')
const exists = require('fs').existsSync
const home = require('user-home')
const inquirer = require('inquirer')
const leftpad = require('left-pad')
const ora = require('ora')
const path = require('path')
const program = require('commander')
const tildify = require('tildify')

const checkVersion = require('../lib/check-version')
const generate = require('../lib/generate')
const logger = require('../lib/logger')
const { isLocalPath, getTemplatePath } = require('../lib/local-path')

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', () => {
  console.log(leftpad('Examples:', 2))
  console.log()
  console.log(chalk.gray(leftpad('# create a new project with a recommended template', 4)))
  console.log(leftpad('$ phaser init webpack my-project', 4))
  console.log()
  console.log(chalk.gray(leftpad('# create a new project straight from a github template', 4)))
  console.log(leftpad('$ phaser init username/repo my-project', 4))
  console.log()
})

/**
 * Display help if no arguments have been specified.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}

help()

/**
 * Settings.
 */

let template = program.args[0]

const hasSlash = template.indexOf('/') > -1
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || false

const tmp = path.join(home, '.phaser-templates', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

if (exists(to)) {
  inquirer
    .prompt([{
      type: 'confirm',
      message: inPlace
        ? 'Generate project in current directory?'
        : 'Target directory exists. Continue?',
      name: 'ok'
    }])
    .then((answers) => {
      if (answers.ok) run()
    })
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // Check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, function (err) {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // Use recommended templates
        const recommendedTemplate = 'phaser-templates/' + template
        downloadAndGenerate(recommendedTemplate)
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  download(template, tmp, { clone: clone }, function (err) {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
